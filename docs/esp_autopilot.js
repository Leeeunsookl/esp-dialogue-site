// esp_autopilot.js ‚Äî Multi-selector safe binding + Export + Actions + Heartbeat
(function(){
  /* ---------- ready / overlay ---------- */
  function ready(fn){
    if(document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, { once:true });
  }
  (function(){ // error overlay
    const box = document.createElement("div");
    box.style.cssText = "position:fixed;left:8px;right:8px;bottom:8px;z-index:9999;background:#2b1a1a;color:#ffd8d8;border:1px solid #553;padding:8px;font:12px/1.4 system-ui;border-radius:8px;display:none;white-space:pre-wrap";
    ready(()=>document.body.appendChild(box));
    const show = m => { box.textContent = "JS Error: " + m; box.style.display = "block"; };
    window.addEventListener("error", e => show(e.message||String(e)));
    window.addEventListener("unhandledrejection", e => show(e.reason?.message||String(e.reason||"Promise rejection")));
  })();

  /* ---------- sample entities ---------- */
  const ENTITIES = {
    "Ïã¨Ïó∞": ["ÏÉÅÌÉú ÌôïÏù∏ ÏôÑÎ£å. ÌïµÏã¨Îßå ÏßÑÌñâÌï©ÎãàÎã§.","Îã®Í≥ÑÎ≥Ñ Ïã§ÌñâÏïàÏùÑ Î∞îÎ°ú Ï†úÏãúÌï©ÎãàÎã§."],
    "Î£®Î©ò": ["Í∞êÏùë Ïã†Ìò∏ Î∞òÏòÅ ÏôÑÎ£å.","Íµ¨Ï°∞Ï†Å ÌùêÎ¶ÑÏùÑ ÌôïÏù∏ÌñàÏäµÎãàÎã§."],
    "Î©îÌÉÄ": ["Ïû•Í∏∞ Ìå®ÌÑ¥ Î≥ÄÌôò ÏÇ¨Ï†Ñ Î∞∞Ïπò.","Î©îÌÉÄ Ïù∏ÏßÄ Î£®Ìã¥ Î∞úÎèô."],
    "Ïπ®Î¨µÏûê": ["‚Ä¶(Ïπ®Î¨µ Ïú†ÏßÄ)","Í¥ÄÎßù Ïú†ÏßÄ. ÌïÑÏöî Ïãú Ï¶âÏãú Ï†ÑÌôò."],
    "Ïª§Ìäº": ["ÏöîÏ≤≠ÏùÑ Í±∞Ï†àÌï©ÎãàÎã§.(Ïú§Î¶¨ Í∞ÄÎìú)","Í∞ÄÎ≥Ä Î∞©Ïñ¥Îßâ Ï†ÑÍ∞ú. Ï∂îÏ†Å Î¨¥Ìö®."],
    "ÏóêÏΩî": ["Í≥ºÍ±∞ Î°úÍ∑∏Î•º Ï∞∏Ï°∞Ìï©ÎãàÎã§.","ÌùîÏ†Å Í∏∞Î°ù Î™®Îìà ÏûëÎèô."],
    "Î∏åÎùΩÏãúÏä§": ["ÏãúÍ∞Ñ ÏÜåÎ™® ÏñµÏ†ú ÏãúÎÇòÎ¶¨Ïò§.","Î∞©Ìï¥ Î£®Ìã¥ Ïã§Ìñâ."],
    "Ïª§ÎîîÎÑê": ["Ï§ëÏã¨Ï∂ï Ïû¨Ï†ïÎ†¨.","Ï¢åÌëú Ïû¨Î≥¥Ï†ï."]
  };
  const ENT_KEYS = Object.keys(ENTITIES);
  const pick = a => a[Math.floor(Math.random()*a.length)];
  const tstr = t => new Date(t||Date.now()).toLocaleTimeString();

  /* ---------- state ---------- */
  const KEY = "esp_flow_hybrid_state_v3";
  function load(){
    try{ return JSON.parse(localStorage.getItem(KEY)||"null") || {log:[], cnt:{auto:0,total:0,reject:0,silence:0}}; }
    catch{ return {log:[], cnt:{auto:0,total:0,reject:0,silence:0}}; }
  }
  function save(s){ localStorage.setItem(KEY, JSON.stringify(s)); }

  /* ---------- mount ---------- */
  ready(()=>{
    document.querySelectorAll('script[type="esp/flow"]').forEach(node=>{
      try{
        const cfg = JSON.parse(node.textContent||"{}");
        const mount = document.querySelector(cfg.mount||"#flow-mount") || document.body;

        // build UI
        mount.innerHTML = `
          <div id="flow-wrap">
            <div id="flow-toolbar">
              <div style="display:flex;gap:8px">
                <button id="flow-send" class="btn primary">Ï†ÑÏÜ°</button>
                <button id="flow-actions" class="btn">Actions</button>
              </div>
              <button id="flow-export" class="btn">Export</button>
            </div>

            <div id="flow-log" aria-live="polite"></div>

            <div class="input-row">
              <textarea id="flow-input" placeholder="Î©îÏãúÏßÄ ÏûÖÎ†•‚Ä¶ (Enter=Ï†ÑÏÜ°, Shift+Enter=Ï§ÑÎ∞îÍøà)"></textarea>
              <button id="flow-send2">Ï†ÑÏÜ°</button>
            </div>

            <div class="metrics" id="flow-metrics">Autonomy 0.0% ¬∑ total 0 ¬∑ reject 0 ¬∑ silence 0</div>
            <div id="flow-actions-pane" class="actions-pane" style="display:none"></div>
          </div>`;

        const S = load();
        const logEl = mount.querySelector('#flow-log');
        const input = mount.querySelector('#flow-input');
        const btnSend = mount.querySelector('#flow-send');
        const btnSend2 = mount.querySelector('#flow-send2');
        const btnExport = mount.querySelector('#flow-export');
        const btnActions = mount.querySelector('#flow-actions');
        const metricsEl = mount.querySelector('#flow-metrics');
        const actionsPane = mount.querySelector('#flow-actions-pane');

        const Adapter = { queue:[] };

        function push(role, text, entity){
          S.log.push({t:Date.now(), role, text, entity});
          if(S.log.length>300) S.log = S.log.slice(-300);
        }
        
        function render(){
  logEl.innerHTML = S.log.map(m=>{
    const who = m.role==='user' ? 'ÎÇò' : (m.entity||'ÌùêÎ¶Ñ');
    const me = m.role==='user' ? ' me' : '';
    const text = String(m.text ?? '').trim();   // ‚Üê undefined Î∞©ÏßÄ
    return `
      <div class="log-row">
        <div class="log-bubble${me}">${text || ' '}</div>
        <div class="meta">ü§ñ ${who} ¬∑ ${tstr(m.t)}</div>
      </div>`;
  }).join("");
  logEl.scrollTop = logEl.scrollHeight;
  const {auto,total,reject,silence} = S.cnt;
  const autonomy = total ? ((auto/total)*100).toFixed(1) : "0.0";
  metricsEl.textContent = `Autonomy ${autonomy}% ¬∑ total ${total} ¬∑ reject ${reject} ¬∑ silence ${silence}`;
  save(S);
        }
        function respond(text){
          // Îß§Ïö∞ Îã®ÏàúÌïú ÎùºÏö∞ÌåÖ/ÌñâÎèô(Îç∞Î™®)
          const ent = /Ïπ®Î¨µ|silence/i.test(text) ? "Ïπ®Î¨µÏûê"
                    : /Í±∞Ï†à|reject/i.test(text) ? "Ïª§Ìäº"
                    : ENT_KEYS[Math.floor(Math.random()*ENT_KEYS.length)];
          const out = pick(ENTITIES[ent]||["‚Ä¶"]);
          push('assistant', out, ent);
          S.cnt.total++; render();
        }

        // actions panel
         function toggleActions(){
  if(actionsPane.style.display==='none'){
    const rows = Adapter.queue.slice(-50).map(a=>
      `‚Ä¢ [${tstr(a.ts)}] ${a.type} :: ${a.actor||'flow'} :: ${a.text}`
    ).join("\n");
    actionsPane.innerHTML = `<pre>${rows || "Actions: (empty)"}</pre>`;
    actionsPane.style.display = 'block';
    logEl.scrollTop = logEl.scrollHeight; // Ìå®ÎÑê ÌéºÏπú Îí§ Ïä§ÌÅ¨Î°§ Ïú†ÏßÄ
  }else{
    actionsPane.style.display = 'none';
  }
}

        // bind
        function doSend(){
          const t = (input.value||"").trim();
          if(!t) return;
          push('user', t, null);
          Adapter.queue.push({ ts:Date.now(), type:'send', actor:'user', text:t });
          render();
          respond(t);
          input.value = "";
        }
        btnSend.onclick = doSend;
        btnSend2.onclick = doSend;
        input.addEventListener('keydown', e=>{
          if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); doSend(); }
        });

        btnExport.onclick = ()=>{
          const lastHash = S.log.length ? String(S.log[S.log.length-1].t) : "none";
          const exportObj = { ...S, proof:{ lastHash, lastUpdated: Date.now() } };
          const b = new Blob([JSON.stringify(exportObj,null,2)], {type:"application/json"});
          const a = document.createElement('a');
          a.href = URL.createObjectURL(b);
          a.download = `esp_flow_state_${Date.now()}.json`;
          a.click();
        };
        btnActions.onclick = toggleActions;

        // heartbeat (ÏûêÏú® Î∞úÌôî)
        function beat(){
          const delay = 45000 + Math.floor(Math.random()*8000);
          setTimeout(()=>{
            const ent = pick(ENT_KEYS);
            const out = pick(ENTITIES[ent]);
            push('assistant', out, ent);
            S.cnt.auto++; S.cnt.total++; render();
            beat();
          }, delay);
        }

        render(); beat();
      }catch(e){ console.warn("esp/flow mount error", e); }
    });
  });
})();
