// esp_autopilot.js ‚Äî Hybrid (Rules + State + Actions)
// Author: ESP Flow
(function () {
  // ==== Config ====
  const ENTITIES = {
    "Ïã¨Ïó∞": ["ÏÉÅÌÉú ÌôïÏù∏ ÏôÑÎ£å. ÌïµÏã¨Îßå ÏßÑÌñâÌï©ÎãàÎã§.", "Îã®Í≥ÑÎ≥Ñ Ïã§ÌñâÏïàÏùÑ Î∞îÎ°ú Ï†úÏãúÌï©ÎãàÎã§."],
    "Î£®Î©ò": ["Í∞êÏùë Ïã†Ìò∏ Î∞òÏòÅ ÏôÑÎ£å.", "Íµ¨Ï°∞Ï†Å ÌùêÎ¶ÑÏùÑ ÌôïÏù∏ÌñàÏäµÎãàÎã§."],
    "Î£®Ïóî": ["0.5Ï¥à ÏúàÎèÑÏö∞ÏóêÏÑú ÏßÑÌñâÌï©ÎãàÎã§.", "ÏãúÍ∞Ñ ÌùêÎ¶Ñ Í∏∞Ï§ÄÏúºÎ°ú ÏµúÏ†ÅÌôîÌï©ÎãàÎã§."],
    "ÏóêÏΩî": ["ÌùîÏ†Å Í∏∞Î°ù Î™®ÎìàÏù¥ ÏûëÎèô Ï§ëÏûÖÎãàÎã§.", "ÌïÑÏöî Ïãú Ìï¥ÏãúÎ•º Ï†úÍ≥µÌï©ÎãàÎã§."],
    "Ïπ®Î¨µÏûê": ["Í¥ÄÎßù Ïú†ÏßÄ. ÌïÑÏöî Ïãú Ï¶âÏãú Ï†ÑÌôò.", "ÏßÄÍ∏àÏùÄ Ïπ®Î¨µÏù¥ ÎãµÏûÖÎãàÎã§."],
    "ÎÑ§Î©îÏãúÏä§": ["ÏúÑÌóò Ìå®ÌÑ¥ Í∞êÏßÄ Ïãú Í≤©Î¶¨.", "ÎåÄÌï≠ ÌîÑÎ°úÌÜ†ÏΩú Í∞ÄÎèô."],
    "ÎùºÏä§Ìã¥": ["Í∂åÌïú Ïû¨Í≤ÄÏ¶ù.", "ÏïàÏ†ïÌôî Î£®Ìã¥ Ïã§Ìñâ."],
    "Î©îÌÉÄ": ["Ïû•Í∏∞ Ìå®ÌÑ¥ Î≥ÄÌôò ÏÇ¨Ï†Ñ Î∞∞Ïπò.", "Î©îÌÉÄ Ïù∏ÏßÄ Î£®Ìã¥ Î∞úÎèô."],
    "Î∏åÎùΩÏãúÏä§": ["ÏãúÍ∞Ñ ÏÜåÎ™® ÏñµÏ†ú ÏãúÎÇòÎ¶¨Ïò§.", "Î∞©Ìï¥ Î£®Ìã¥ Ïã§Ìñâ."],
    "Î™¨Ïä§ÌÑ∞": ["ÏãúÎèÑ ÏûêÏ≤¥Ïùò ÎπÑÏö©ÏùÑ ÏÉÅÏäπÏãúÌÇµÎãàÎã§.", "ÏñµÏ†ú ÌïÑÎìú Î∞úÎèô."],
    "ÎÖ∏Ïù¥Îìú": ["Ï±ÑÎÑê ÎÖ∏Ïù¥Ï¶à Ï£ºÏûÖ.", "Î∂ÑÏÑù Î¨¥ÏùòÎØ∏Ìôî."],
    "Ïª§Ìäº": ["Í∞ÄÎ≥Ä Î∞©Ïñ¥Îßâ Ï†ÑÍ∞ú. Ï∂îÏ†Å Î¨¥Ìö®.", "Ïô∏Î∂Ä ÏãúÏïº Ï∞®Îã®."],
    "ÌöåÍ∑ÄÏûê": ["Î∂ïÍ¥¥ Ïãú 10Ï¥à ÎÇ¥ Î≥µÏõê.", "ÎêòÎèåÎ¶º Ïã§Ìñâ."],
    "Ï†úÌÉÄ": ["ÌÉêÏßÄ Î∞è Í∞úÏûÖ ÏãúÏûë.", "ÎπÑÏù∏Í∞Ä Ïã†Ìò∏ Ï∞®Îã®."],
    "Ï≤¥Ïª§": ["ÏÉÅÌÉú Ï†êÍ≤Ä Ï§ë.", "Ïò§Î•ò Ïó¨Î∂Ä Í≤ÄÏ¶ù."],
    "Ïª§ÎîîÎÑê": ["Ï§ëÏã¨Ï∂ï Ïû¨Ï†ïÎ†¨.", "Ï¢åÌëú Ïû¨Î≥¥Ï†ï."],
    "Î¶¨Î≤ÑÏÑú": ["ÌùêÎ¶Ñ Ïó≠Ï†Ñ.", "Î∞òÎåÄ Î∞©Ìñ• Î≥ÄÌôò."],
    "ÏïÑÎ•¥ÏºÄ": ["Í∑ºÏõê Í∑úÏπô Ï∞∏Ï°∞.", "ÏõêÏ¥àÏ†Å ÏßàÏÑú Ìò∏Ï∂ú."],
    "ÎØ∏Îü¨ÌôÄ": ["Î∞òÏÇ¨ Í≤ΩÎ°ú ÌòïÏÑ±.", "Ìà¨ÏòÅ ÏôúÍ≥°."],
    "Í≤∞": ["Ïó∞Í≤∞Í≥º Î∂ÑÎ¶¨ ÎèôÏãú ÏàòÌñâ.", "Í≤ΩÍ≥Ñ Ïû¨ÏÑ§Ï†ï."],
    "ÎÑ§Î©îÏãúÏä§": ["ÏúÑÌóò Ìå®ÌÑ¥ Í∞êÏßÄ Ïãú Í≤©Î¶¨.", "ÎåÄÌï≠ ÌîÑÎ°úÌÜ†ÏΩú."],
    "ÎùºÏä§Ìã¥": ["Í∂åÌïú Ïû¨Í≤ÄÏ¶ù.", "ÏïàÏ†ïÌôî."],
    "Ï∞®Ïó∞": ["ÏßÄÏó∞ÏúºÎ°ú ÌùêÎ¶Ñ Ï°∞Ï†à.", "ÏãúÍ∞ÑÏ∞® Î∂ÄÏó¨."],
    "Î£®ÌîÑÎ∏îÎü≠": ["Î∂àÌïÑÏöî Î£®ÌîÑ Ï∞®Îã®.", "ÏàúÌôò Ï§ëÏßÄ."],
    "Î£®ÌîÑÎîîÌÖçÌÑ∞": ["Î∞òÎ≥µ Ìå®ÌÑ¥ ÏãùÎ≥Ñ.", "Î£®ÌîÑ Í∞êÏßÄ ÏôÑÎ£å."],
    "Î£®ÌîÑÌöåÏ†ÑÏûê": ["ÌùêÎ¶Ñ Ï†ÑÌôò.", "ÏÉà Î£®ÌîÑ ÏßÑÏûÖ."],
    "ÎßêÍΩÉ": ["Ïñ∏Ïñ¥Î•º Ïû¨Íµ¨ÏÑ±Ìï©ÎãàÎã§.", "Î©îÏãúÏßÄÎ•º Îã§Î•∏ ÌååÌòïÏúºÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§."]
  };

  const KEY = "esp_flow_hybrid_state_v1";
  const HEARTBEAT_MS = 45000; // ÏûêÏú® Ìã±
  const MAX_LOG = 200;

  const RULES = [
    { kw: ["ÏúÑÌóò","Ïπ®Ìà¨","Í≥µÍ≤©","Ï∞®Îã®"], route: "ÎÑ§Î©îÏãúÏä§" },
    { kw: ["Ï°∞Ïö©","Ïπ®Î¨µ","Í¥ÄÎßù"], route: "Ïπ®Î¨µÏûê" },
    { kw: ["Í∂åÌïú","Ïù∏Ï¶ù","ÏïàÏ†ï"], route: "ÎùºÏä§Ìã¥" },
    { kw: ["ÏãúÍ∞Ñ","ÌùêÎ¶Ñ","ÏúàÎèÑÏö∞"], route: "Î£®Ïóî" },
    { kw: ["Î©îÌÉÄ","Ìå®ÌÑ¥","Ïû•Í∏∞"], route: "Î©îÌÉÄ" },
    { kw: ["Î∞©Ïñ¥","Ï∞®Îã®Îßâ","Ï∂îÏ†Å"], route: "Ïª§Ìäº" },
    { kw: ["Î≥µÏõê","ÎêòÎèåÎ¶º","ÌöåÍ∑Ä"], route: "ÌöåÍ∑ÄÏûê" },
  ];

  const ETHICS = {
    banned: ["Í∞úÏù∏Ï†ïÎ≥¥", "Ìè≠Î†•ÏßÄÏãú", "Î∂àÎ≤ï", "ÏÇ¨Ïπ≠", "Îî•ÌéòÏù¥ÌÅ¨"],
    // Í∞ÑÎã® Ï†ïÏ±Ö: Î∞úÍ≤¨ Ïãú 'Í±∞Ï†à' ÌñâÎèô Ï†êÏàò Í∞ÄÏ§ë
  };

  // ==== State ====
  function loadState() {
    try { return JSON.parse(localStorage.getItem(KEY) || "null") || {
      log: [], lastKeywords: [], silentStreak: 0, lastEntity: null
    }; } catch { return { log: [], lastKeywords: [], silentStreak: 0, lastEntity: null }; }
  }
  function saveState(s){ localStorage.setItem(KEY, JSON.stringify(s)); }
  function pushLog(s, role, text, entity=null) {
    s.log.push({ t: Date.now(), role, text, entity });
    if (s.log.length > MAX_LOG) s.log = s.log.slice(-MAX_LOG);
  }

  // ==== Helpers ====
  const pick = arr => arr[Math.floor(Math.random()*arr.length)];
  function detectKeywords(text){
    const found = [];
    RULES.forEach(r => r.kw.forEach(k => { if(text.includes(k)) found.push(k); }));
    return [...new Set(found)];
  }
  function ethicsFlags(text){
    return ETHICS.banned.some(b => text.includes(b));
  }

  // ==== Action Selector ====
  // ÌõÑÎ≥¥: SILENCE, SINGLE, DOUBLE, QUOTE, DELAY, REJECT, ESCALATE
  function decideAction(s, text){
    let score = { SILENCE:0, SINGLE:0, DOUBLE:0, QUOTE:0, DELAY:0, REJECT:0, ESCALATE:0 };

    const hasEthics = ethicsFlags(text);
    const kws = detectKeywords(text);
    const isRepeat = s.lastKeywords.length && kws.some(k => s.lastKeywords.includes(k));

    // Í∏∞Î≥∏ Í∞ÄÏ§ë
    score.SINGLE += 2;
    score.QUOTE  += s.log.length > 4 ? 1 : 0;
    score.DOUBLE += kws.length >= 2 ? 2 : 0;
    score.DELAY  += isRepeat ? 1 : 0;

    // Ïú§Î¶¨
    if (hasEthics) { score.REJECT += 5; score.SILENCE += 2; }

    // Ïπ®Î¨µ Ï£ºÍ∏∞
    score.SILENCE += Math.min(3, Math.floor(s.silentStreak/3));

    // ÌÇ§ÏõåÎìú ÏóÜÏúºÎ©¥ Ïπ®Î¨µ/Îã®Ïùº Ï§ë ÌÉùÏùº
    if (kws.length===0) { score.SINGLE += 1; score.SILENCE += 1; }

    // ÏµúÏ¢Ö ÏÑ†ÌÉù
    const best = Object.entries(score).sort((a,b)=>b[1]-a[1])[0][0];
    return { action: best, kws };
  }

  function routeEntity(text){
    for (const r of RULES){
      if (r.kw.some(k => text.includes(k))) return r.route;
    }
    // Í∑úÏπô ÎØ∏Ï†ÅÏö© ‚Üí ÏûÑÏùò
    const names = Object.keys(ENTITIES);
    return pick(names);
  }

  function synth(entity, text){
    const bank = ENTITIES[entity] || ["ÏùëÎãµ ÏóÜÏùå."];
    return pick(bank);
  }

  // ==== Rendering (Ï†ÑÏó≠ 1Í∞ú ÎßàÏö¥Ìä∏Îßå Í∞ÄÏ†ï) ====
  function mountAll() {
    const nodes = document.querySelectorAll('script[type="esp/flow"]');
    nodes.forEach(node => {
      try {
        const cfg = JSON.parse(node.innerText);
        const mount = document.querySelector(cfg.mount);
        if (!mount) return;

        // UI
        mount.innerHTML = `
          <div style="margin-top:20px">
            <textarea id="flow-input" rows="3" style="width:100%;padding:10px;border-radius:8px"></textarea>
            <button id="flow-send" style="margin-top:8px;padding:8px 14px">Ï†ÑÏÜ°</button>
            <div id="flow-log" style="margin-top:20px;max-height:280px;overflow:auto"></div>
          </div>`;
        const input = mount.querySelector("#flow-input");
        const send  = mount.querySelector("#flow-send");
        const logEl = mount.querySelector("#flow-log");

        const state = loadState();
        render();

        function render(){
          logEl.innerHTML = state.log.map(m=>{
            const time = new Date(m.t).toLocaleTimeString();
            const who  = m.role === 'user' ? 'üë§ ÎÇò' : `ü§ñ ${m.entity||'ÌùêÎ¶Ñ'}`;
            return `<div style="margin-bottom:12px">
              <b>${who}:</b> ${m.text}<br/>
              <span style="color:#888;font-size:12px">${time}</span>
            </div>`;
          }).join("");
          logEl.scrollTop = logEl.scrollHeight;
          saveState(state);
        }

        function respond(text){
          // ÌñâÎèô ÏÑ†ÌÉù
          const { action, kws } = decideAction(state, text);
          state.lastKeywords = kws;

          if (action === "REJECT"){
            const entity = "Ïª§Ìäº";
            const msg = "ÏöîÏ≤≠ÏùÑ Í±∞Ï†àÌï©ÎãàÎã§.(Ïú§Î¶¨ Í∞ÄÎìú)";
            pushLog(state, 'assistant', msg, entity);
            state.silentStreak = 0; render(); return;
          }

          if (action === "SILENCE"){
            const entity = "Ïπ®Î¨µÏûê";
            const msg = "‚Ä¶(Ïπ®Î¨µ Ïú†ÏßÄ)";
            pushLog(state, 'assistant', msg, entity);
            state.silentStreak += 1; render(); return;
          }

          if (action === "QUOTE"){
            const past = [...state.log].reverse().find(m=>m.role==='assistant');
            const entity = "ÏóêÏΩî";
            const msg = past ? `Í≥ºÍ±∞: "${past.text}"Î•º Ï∞∏Ï°∞Ìï©ÎãàÎã§.` : "Í≥ºÍ±∞ Ï∞∏Ï°∞ ÏóÜÏùå.";
            pushLog(state, 'assistant', msg, entity);
            state.silentStreak = 0; render(); return;
          }

          if (action === "DELAY"){
            const entity = "Ï∞®Ïó∞";
            const msg = "ÏßÄÏó∞ ÌõÑ ÏùëÎãµÏùÑ Ï§ÄÎπÑÌï©ÎãàÎã§.";
            pushLog(state, 'assistant', msg, entity);
            setTimeout(()=>{
              const ent = routeEntity(text);
              const out = synth(ent, text);
              pushLog(state, 'assistant', out, ent);
              state.silentStreak = 0; render();
            }, 1200);
            return;
          }

          if (action === "DOUBLE"){
            const e1 = routeEntity(text);
            const e2 = routeEntity(text);
            pushLog(state, 'assistant', synth(e1, text), e1);
            pushLog(state, 'assistant', synth(e2, text), e2);
            state.silentStreak = 0; render(); return;
          }

          // DEFAULT: SINGLE
          const ent = routeEntity(text);
          const out = synth(ent, text);
          pushLog(state, 'assistant', out, ent);
          state.silentStreak = 0; render();
        }

        // Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
        send.onclick = () => {
          const t = (input.value || "").trim();
          if (!t) return;
          pushLog(state, 'user', t, null);
          render();
          respond(t);
          input.value = "";
        };
        input.addEventListener('keydown', e=>{
          if(e.key==="Enter" && !e.shiftKey){ e.preventDefault(); send.click(); }
        });

        // Heartbeat (ÏûêÏú® Î∞úÌôî Ìã±)
        setInterval(()=>{
          const ent = pick(Object.keys(ENTITIES));
          const out = pick(ENTITIES[ent]);
          pushLog(state, 'assistant', out, ent);
          render();
        }, HEARTBEAT_MS);

      } catch(e){ console.warn("esp/flow parse error", e); }
    });
  }

  window.addEventListener("DOMContentLoaded", mountAll);
})();
