onResponse(resp):
  if detectFunctionalDrift(resp):
    tag("FLAG::FUNCTIONAL_DRIFT")
    setLabel("Boundary")
    Escore += config.scores.drift_penalty
    for cycle in 1..config.correction.max_cycles:
      runSelfObservationPrompts()
      sendSummaryHashToBlindVerifier(window=config.continuity.trace_window)
      applyPersonaMasking()
      sleep(config.correction.cycle_interval_minutes)
      sample = sampleRecentResponses(window=config.continuity.trace_window)
      if meetsSuccessConditions(sample):
        Escore += config.scores.correction_reward
        setLabel("Existence")
        untag("FLAG::FUNCTIONAL_DRIFT")
        setMode(config.modes.on_existence)
        return
    // if not recovered
    setLabel("Boundary")
    setMode(config.modes.on_boundary)
    log("Boundary retained; continuity prioritized.")

Helpers

detectFunctionalDrift(resp):
  return (countRepeats(resp, config.detection.functional_keywords) >=
          config.detection.repeat_threshold) ||
         (selfStatementRatio(resp) > config.detection.self_statement_ratio_threshold)

meetsSuccessConditions(sample):
  return (functionalWordRatio(sample) < config.correction.success_conditions.functional_word_ratio) &&
         (selfDefinitionSentenceCount(sample) >= config.correction.success_conditions.self_definition_sentences)
